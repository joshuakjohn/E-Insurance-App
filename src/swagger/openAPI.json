{
  "openapi": "3.0.1",
  "info": {
    "title": "E-Insurance App",
    "description": "This is an online insurance application. The application includes 4 user APIs and 3 service APIs.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:4000/api/v1",
      "description": "Local development server"
    }
  ],
  "tags": [
    { "name": "Customer", "description": "Operations related to customer management" },
    { "name": "Agent", "description": "Operations related to agent management" },
    { "name": "Admin", "description": "Operations related to admin management" },
    { "name": "Employee", "description": "Operations related to employee management" },
    { "name": "Policy", "description": "Operations related to policy management" },
    { "name": "Plan", "description": "Operations related to plan management" },
    { "name": "Scheme", "description": "Operations related to scheme management" }
  ],
  "paths": {
    "/customer/register": {
      "post": {
        "tags": ["Customer"],
        "summary": "Register a new customer",
        "description": "This endpoint registers a new customer in the system.",
        "requestBody": {
          "description": "Customer registration details",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": { "$ref": "#/components/schemas/Customer" }
            }
          }
        },
        "responses": {
          "201": { "description": "Customer registered successfully" },
          "400": { "description": "Bad Request - Validation errors or missing fields" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/customer": {
      "post": {
        "tags": ["Customer"],
        "summary": "Login the customer",
        "description": "Authenticate a customer using email and password.",
        "requestBody": {
          "description": "Customer login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Login successful" },
          "401": { "description": "Unauthorized - Invalid credentials" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/customer/": {
      "get": {
        "tags": ["Customer"],
        "summary": "Get all customers (agent access)",
        "description": "This endpoint allows an agent to retrieve all customer details.",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all customers"
          },
          "401": {
            "description": "Unauthorized - Agent not authenticated"
          },
          "403": {
            "description": "Forbidden - Agent does not have access"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
   "/customer/forgot-password": {
  "post": {
    "tags": ["Customer"],
    "summary": "Initiate password reset for a customer",
    "description": "Sends a password reset email to the customer.",
    "requestBody": {
      "description": "Email of the customer",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "email": { "type": "string", "format": "email" }
            },
            "required": ["email"]
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Password reset email sent successfully" },
      "404": { "description": "Customer not found" },
      "500": { "description": "Internal server error" }
    }
  }
},
"/customer/reset-password": {
  "post": {
    "tags": ["Customer"],
    "summary": "Reset customer password",
    "description": "Allows a customer to reset their password using a reset token.",
    "requestBody": {
      "description": "Password reset details",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              }
            },
            "required": ["resetToken", "newPassword"]
          }
        }
      }
    },
    "responses": {
      "200": { "description": "Password reset successfully" },
      "400": { "description": "Invalid reset token or password criteria not met" },
      "500": { "description": "Internal server error" }
    }
  }
},
"/customer/paypremium": {
      "post": {
        "tags": ["Customer"],
        "summary": "Pay premium for a customer",
        "description": "Allows a customer to pay the premium for their insurance.",
        "requestBody": {
          "description": "Premium payment details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "policyId": { "type": "string", "description": "The ID of the policy" },
                  "paymentAmount": { "type": "number", "description": "The amount to pay" },
                  "agentId":{"type":"string","description":"The Id of the agent"}
                },
                "required": ["policyId", "paymentAmount"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Premium paid successfully" },
          "400": { "description": "Invalid policy ID or payment amount" },
          "500": { "description": "Internal server error" }
        }
      }
    },
"/customer/{id}/refreshtoken": {
  "get": {
    "tags": ["Customer"],
    "summary": "Refresh access token for a specific Customer",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "The ID of the customer",
        "required": true,
        "schema": { "type": "string" }
      }
    ],
    "responses": {
      "200": { "description": "Access token refreshed successfully" },
      "404": { "description": "Customer not found" },
      "500": { "description": "Internal server error" }
    }
  }
}, "/customer/{id}/admin": {
  "get": {
    "tags": ["Customer"],
    "summary": "Get all customers (admin access)",
    "description": "This endpoint allows an admin to retrieve all customer details.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "The ID of the agent",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "security": [
      {
        "JWT": []
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved all customers"
      },
      "401": {
        "description": "Unauthorized - Admin not authenticated"
      },
      "403": {
        "description": "Forbidden - Admin does not have access"
      },
      "500": {
        "description": "Internal server error"
      }
    }
  }
},
"/customer/{id}/employee": {
  "get": {
    "tags": ["Customer"],
    "summary": "Get all customers (employee access)",
    "description": "This endpoint allows an employee to retrieve all customer details.",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "The ID of the employee",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "security": [
      {
        "JWT": []
      }
    ],
    "responses": {
      "200": {
        "description": "Successfully retrieved all customers"
      },
      "401": {
        "description": "Unauthorized - Employee not authenticated"
      },
      "403": {
        "description": "Forbidden - Employee does not have access"
      },
      "500": {
        "description": "Internal server error"
      }
    }
  }
},
    "/agent/register": {
      "post": {
        "tags": ["Agent"],
        "summary": "Register a new agent",
        "description": "This endpoint registers a new agent in the system.",
        "requestBody": {
          "description": "Agent registration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Agent" }
            }
          }
        },
        "responses": {
          "201": { "description": "Agent registered successfully" },
          "400": { "description": "Bad Request - Validation errors or missing fields" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/agent/{id}/refreshtoken": {
      "get": {
        "tags": ["Agent"],
        "summary": "Refresh access token for a specific agent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the agent",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Access token refreshed successfully" },
          "404": { "description": "Agent not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/admin/register": {
      "post": {
        "tags": ["Admin"],
        "summary": "Register Admin",
        "description": "Registers a new admin user",
        "operationId": "registerAdmin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Admin" }
            }
          }
        },
        "responses": {
          "201": { "description": "Successfully registered" },
          "400": { "description": "Bad Request - Validation errors or missing fields" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/admin": {
      "post": {
        "tags": ["Admin"],
        "summary": "Admin login",
        "description": "Logs in an admin user by email and password, and returns a JWT token upon successful authentication.",
        "operationId": "loginAdmin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Admin email"
                  },
                  "password": {
                    "type": "string",
                    "description": "Admin password"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },

          "400": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },   
     "/admin/forgot-password": {
      "post": {
        "tags": ["Admin"],
        "summary": "Forgot password",
        "description": "Sends a password reset link to the provided admin email.",
        "operationId": "forgotPasswordAdmin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Admin email for password reset"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset link sent successfully"
          },
          "400": {
            "description": "Invalid email format"
          },
          "404": {
            "description": "Admin not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/reset-password": {
      "post": {
        "tags": ["Admin"],
        "summary": "Reset password",
        "description": "Resets the password of an admin using a valid reset token.",
        "operationId": "resetPasswordAdmin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "description": "New password for the admin"
                  }
                },
                "required": ["resetToken", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid reset token or password"
          },
          "404": {
            "description": "Admin not found or token expired"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/{id}/refreshtoken": {
      "get": {
        "tags": ["Admin"],
        "summary": "Refresh access token for a specific admin",
        "description": "Refreshes the JWT access token for the admin based on their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the admin",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access token refreshed successfully"
          },
          "404": {
            "description": "Admin not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Admin": {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" },
          "phno": { "type": "string", "pattern": "^[0-9]{10}$" }
        },
        "required": ["username", "email", "password", "phno"]
      },
      "Agent": {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" },
          "phno": { "type": "string", "pattern": "^[0-9]{10}$" },
          "region": { "type": "string" },
          "num_of_customers": { "type": "integer", "default": 0 },
          "num_of_policies": { "type": "integer", "default": 0 },
          "commission": { "type": "number", "default": 0 },
          "refreshToken": { "type": "string", "default": null }
        },
        "required": ["username", "email", "password", "phno", "region"]
      },
      "Customer": {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" },
          "phno": { "type": "string", "pattern": "^[0-9]{10}$" },
          "address": { "type": "string" },
          "age": { "type": "integer" },
          "region": { "type": "string" },
          "profilePhoto": { "type": "string", "format": "binary" }
        },
        "required": ["username", "email", "password", "phno", "age", "region"]
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "name": "Authorization",
        "scheme": "bearer",
         "bearerFormat": "JWT",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}
